services:
  postgresql:
    container_name: selecro_postgres
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: '${SQL_USER}'
      POSTGRES_PASSWORD: '${SQL_PASSWORD}'
      POSTGRES_DB: '${SQL_DATABASE}'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '${SQL_PORT}:5432'
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', '${SQL_USER}', '-d', '${SQL_DATABASE}']
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 5s

  pgadmin:
    container_name: selecro_pgadmin4
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: '${PGADMIN_DEFAULT_EMAIL}'
      PGADMIN_DEFAULT_PASSWORD: '${PGADMIN_DEFAULT_PASSWORD}'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - '${PGADMIN_PORT}:80'
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', 'http://localhost:80/misc/ping']
      interval: 30s
      retries: 5
      timeout: 10s

  redis:
    container_name: selecro_redis
    image: redis:latest
    restart: unless-stopped
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 50
      start_period: 5s

  zookeeper:
    container_name: selecro_zookeeper
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: '${ZOOKEEPER_CLIENT_PORT}'
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '${ZOOKEEPER_PORT}:${ZOOKEEPER_CLIENT_PORT}'
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "echo 'srvr' | nc localhost ${ZOOKEEPER_CLIENT_PORT} | grep -q 'Mode:'",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  kafka:
    container_name: selecro_kafka
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '${KAFKA_EXTERNAL_PORT}:${KAFKA_EXTERNAL_PORT}'
    environment:
      KAFKA_BROKER_ID: '${KAFKA_BROKER_ID}'
      KAFKA_ZOOKEEPER_CONNECT: '${ZOOKEEPER_HOST}:${ZOOKEEPER_CLIENT_PORT}'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_INTERNAL_HOST}:${KAFKA_INTERNAL_PORT},PLAINTEXT_HOST://${KAFKA_ADVERTISED_HOST}:${KAFKA_EXTERNAL_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: '${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}'
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: '${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}'
    volumes:
      - kafka_data:/var/lib/kafka/data

  vault:
    container_name: selecro_vault
    image: hashicorp/vault:latest
    restart: unless-stopped
    ports:
      - '${VAULT_PORT}:${VAULT_PORT}'
    volumes:
      - vault_data:/vault/file
      - vault_logs:/vault/logs
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: '${ROOT_VAULT_TOKEN}'
      VAULT_DEV_LISTEN_ADDRESS: '0.0.0.0:${VAULT_PORT}'
      VAULT_API_ADDR: 'http://${VAULT_HOST}:${VAULT_PORT}'
    cap_add:
      - IPC_LOCK
    command: server -dev -dev-root-token-id="${ROOT_VAULT_TOKEN}"
    healthcheck:
      test:
        ['CMD', 'curl', '-f', 'http://127.0.0.1:${VAULT_PORT}/v1/sys/health']
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 60s

  selecro_app:
    build: .
    container_name: selecro
    image: selecro
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DEFAULT_HOST: '${APP_DEFAULT_HOST}'
      DEFAULT_PORT: '${APP_DEFAULT_PORT}'
      JWT_SECRET: '${JWT_SECRET}'
      JWT_SECRET_EMAIL: '${JWT_SECRET_EMAIL}'
      JWT_SECRET_SIGNUP: '${JWT_SECRET_SIGNUP}'
      SQL_HOST: '${SQL_HOST}'
      SQL_PORT: '${SQL_PORT_INTERNAL}'
      SQL_USER: '${SQL_USER}'
      SQL_PASSWORD: '${SQL_PASSWORD}'
      SQL_DATABASE: '${SQL_DATABASE}'
      EMAIL_HOST: '${EMAIL_HOST}'
      EMAIL_PORT: '${EMAIL_PORT}'
      EMAIL_USER: '${EMAIL_USER}'
      EMAIL_PASSWORD: '${EMAIL_PASSWORD}'
      VAULT_URL: 'http://${VAULT_HOST_INTERNAL}:${VAULT_PORT_INTERNAL}'
      ROOT_VAULT_TOKEN: '${ROOT_VAULT_TOKEN}'
      REDIS_HOST: '${REDIS_HOST}'
      REDIS_PORT: '${REDIS_PORT_INTERNAL}'
      KAFKA_BROKERS: '${KAFKA_BROKERS_INTERNAL}'
    ports:
      - '${APP_EXTERNAL_PORT}:${APP_DEFAULT_PORT}'
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      vault:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${APP_DEFAULT_PORT}']
      interval: 30s
      retries: 5
      timeout: 10s
      start_period: 15s

volumes:
  postgres_data:
  pgadmin_data:
  redis_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  vault_data:
  vault_logs:

networks:
  default:
    driver: bridge
