services:
  postgresql:
    container_name: selecro_postgresql
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: '${POSTGRESQL_USER}'
      POSTGRES_PASSWORD: '${POSTGRESQL_PASSWORD}'
      POSTGRES_DB: '${POSTGRESQL_DATABASE}'
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    ports:
      - '${POSTGRESQL_PORT}:5432'
    healthcheck:
      test:
        [
          'CMD',
          'sh',
          '-c',
          'PGPASSWORD=$${POSTGRESQL_PASSWORD} pg_isready -U $${POSTGRESQL_USER} -d $${POSTGRESQL_DATABASE}',
        ]
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 5s

  pgadmin:
    container_name: selecro_pgadmin4
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: '${PGADMIN_DEFAULT_EMAIL}'
      PGADMIN_DEFAULT_PASSWORD: '${PGADMIN_DEFAULT_PASSWORD}'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - '${PGADMIN_PORT}:80'
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:5000/ || exit 1
      interval: 40s
      timeout: 30s
      retries: 3
      start_period: 60s

  redis:
    container_name: selecro_redis
    image: redis:latest
    restart: unless-stopped
    ports:
      - '${REDIS_PORT_INTERNAL}:6379'
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'sh', '-c', 'redis-cli -a $${REDIS_PASSWORD} ping']
      interval: 5s
      timeout: 3s
      retries: 50
      start_period: 5s

  kafka:
    container_name: selecro_kafka
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    ports:
      - '${KAFKA_PORT}:9092'
      - '29092:29092'
    environment:
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: '1'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      CLUSTER_ID: '2r2Mkf7oQLOdA2vH6Z5TJw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: '1'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafdrop:
    container_name: selecro_kafdrop
    image: obsidiandynamics/kafdrop:latest
    restart: unless-stopped
    ports:
      - '${KAFDROP_PORT}:9000'
    environment:
      KAFKA_BROKERCONNECT: 'kafka:9092'
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: wget --spider -q http://localhost:9000/ || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  redisinsight:
    container_name: selecro_redisinsight
    image: redis/redisinsight:latest
    restart: unless-stopped
    ports:
      - '${REDISINSIGHT_PORT}:5540'
    volumes:
      - redisinsight_data:/data
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: wget --spider -q http://localhost:5540/ || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  vault:
    container_name: selecro_vault
    image: hashicorp/vault:latest
    restart: unless-stopped
    ports:
      - '${VAULT_PORT}:${VAULT_PORT}'
    volumes:
      - vault_data:/vault/file
      - vault_logs:/vault/logs
    environment:
      VAULT_DEV_LISTEN_ADDRESS: '0.0.0.0:${VAULT_PORT}'
      VAULT_API_ADDR: '${VAULT_PROTOCOL}://${VAULT_HOST}:${VAULT_PORT}'
    cap_add:
      - IPC_LOCK
    command: server -dev
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --spider -q http://127.0.0.1:${VAULT_PORT}/v1/sys/health',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  selecro_app:
    build: .
    container_name: selecro
    image: selecro
    restart: unless-stopped
    env_file:
      - .env
    environment:
      FIREBASE_ADMIN_BASE64: '${FIREBASE_ADMIN_BASE64}'
      REDIS_HOST: '${REDIS_HOST}'
      REDIS_PORT_INTERNAL: '${REDIS_PORT_INTERNAL}'
      REDIS_PASSWORD: '${REDIS_PASSWORD}'
      REDIS_DB: '${REDIS_DB}'
      POSTGRESQL_HOST: '${POSTGRESQL_HOST}'
      POSTGRESQL_PORT: '${POSTGRESQL_PORT}'
      POSTGRESQL_USER: '${POSTGRESQL_USER}'
      POSTGRESQL_PASSWORD: '${POSTGRESQL_PASSWORD}'
      POSTGRESQL_DATABASE: '${POSTGRESQL_DATABASE}'
      VAULT_PROTOCOL: '${VAULT_PROTOCOL}'
      VAULT_HOST: '${VAULT_HOST}'
      VAULT_PORT: '${VAULT_PORT}'
      VAULT_ROOT_TOKEN: '${VAULT_ROOT_TOKEN}'
      VAULT_UNSEAL_KEY_1: '${VAULT_UNSEAL_KEY_1}'
      VAULT_UNSEAL_KEY_2: '${VAULT_UNSEAL_KEY_2}'
      VAULT_UNSEAL_KEY_3: '${VAULT_UNSEAL_KEY_3}'
      KAFKA_HOST: '${KAFKA_HOST}'
      KAFKA_PORT: '${KAFKA_PORT}'
      APP_DEFAULT_HOST: '${APP_DEFAULT_HOST}'
      APP_DEFAULT_PORT: '${APP_DEFAULT_PORT}'
      APP_EXTERNAL_PORT: '${APP_EXTERNAL_PORT}'
      NODE_ENV: '${NODE_ENV}'
      ALLOWED_IPS: '${ALLOWED_IPS}'
      DENIED_IPS: '${DENIED_IPS}'
      CORS_ORIGINS: '${CORS_ORIGINS}'
      COOKIE_PARSER_SECRET: '${COOKIE_PARSER_SECRET}'
      API_HMAC_SECRET: '${API_HMAC_SECRET}'
      API_SUPPORTED_VERSIONS: '${API_SUPPORTED_VERSIONS}'
      API_VERSION_HEADER: '${API_VERSION_HEADER}'
      EMAIL_HOST: '${EMAIL_HOST}'
      EMAIL_PORT: '${EMAIL_PORT}'
      EMAIL_USER: '${EMAIL_USER}'
      EMAIL_PASSWORD: '${EMAIL_PASSWORD}'
    ports:
      - '${APP_EXTERNAL_PORT}:${APP_DEFAULT_PORT}'
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      vault:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${APP_DEFAULT_PORT}']
      interval: 30s
      retries: 5
      timeout: 10s
      start_period: 15s

volumes:
  postgresql_data:
  pgadmin_data:
  redis_data:
  kafka_data:
  vault_data:
  vault_logs:
  redisinsight_data:
